<div id="floating-panel">
  <b>Start: </b>
  <select id="start">
    <option value="1" data-lat="35.50003588367271" data-lng="-80.84525387374644" selected>
      Chambers
    </option>
    </option>
  </select>
  <b>End: </b>
  <select id="end">
    <option value="2" data-lat="35.50003588367271" data-lng="-80.84525387374644" selected>
      Chambers
    </option>
  </select>
</div>
<div id="map"></div>
&nbsp;
<div id="warnings-panel"></div>

<script>
  var coords = {
    'CHA': '35.50003588367271, -80.84525387374644',
    'COM': '35.50253027800853, -80.84401005625122',
    'SOC': '35.50155554165737, -80.83904852384163'
  };

  chambers = {lat: 35.50003588367271, lng: -80.84525387374644};
  commons = {lat: 35.50253027800853, lng: -80.84401005625122};
  soccer = {lat: 35.50155554165737, lng: -80.83904852384163};

  function initMap() {
  const markerArray = [];
  // Instantiate a directions service.
  const directionsService = new google.maps.DirectionsService();
  // Create a map and center it on Manhattan.
  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 13,
    center: { lat: 35.5, lng: -80.8 },
  });
  // Create a renderer for directions and bind it to the map.
  const directionsRenderer = new google.maps.DirectionsRenderer({ map: map });
  // Instantiate an info window to hold step text.
  const stepDisplay = new google.maps.InfoWindow();

  // Display the route between the initial start and end selections.
  calculateAndDisplayRoute(
    directionsRenderer,
    directionsService,
    markerArray,
    stepDisplay,
    map
  );

  // Listen to change events from the start and end lists.
  const onChangeHandler = function () {
    calculateAndDisplayRoute(
      directionsRenderer,
      directionsService,
      markerArray,
      stepDisplay,
      map
    );
  };

  document.getElementById("start").addEventListener("change", onChangeHandler);
  document.getElementById("end").addEventListener("change", onChangeHandler);
}

function calculateAndDisplayRoute(
  directionsRenderer,
  directionsService,
  markerArray,
  stepDisplay,
  map
) {
  // First, remove any existing markers from the map.
  for (let i = 0; i < markerArray.length; i++) {
    markerArray[i].setMap(null);
  }

  // Retrieve the start and end locations and create a DirectionsRequest using
  // WALKING directions.
  directionsService
    .route({
      origin: document.getElementById("start").value,
      destination: document.getElementById("end").value,
      travelMode: google.maps.TravelMode.WALKING,
    })
    .then((result) => {
      // Route the directions and pass the response to a function to create
      // markers for each step.
      document.getElementById("warnings-panel").innerHTML =
        "<b>" + result.routes[0].warnings + "</b>";
      directionsRenderer.setDirections(result);
      showSteps(result, markerArray, stepDisplay, map);
    })
    .catch((e) => {
      window.alert("Directions request failed due to " + e);
    });
}

function showSteps(directionResult, markerArray, stepDisplay, map) {
  // For each step, place a marker, and add the text to the marker's infowindow.
  // Also attach the marker to an array so we can keep track of it and remove it
  // when calculating new routes.
  const myRoute = directionResult.routes[0].legs[0];

  for (let i = 0; i < myRoute.steps.length; i++) {
    const marker = (markerArray[i] =
      markerArray[i] || new google.maps.Marker());

    marker.setMap(map);
    marker.setPosition(myRoute.steps[i].start_location);
    attachInstructionText(
      stepDisplay,
      marker,
      myRoute.steps[i].instructions,
      map
    );
  }
}

function attachInstructionText(stepDisplay, marker, text, map) {
  google.maps.event.addListener(marker, "click", () => {
    // Open an info window when the marker is clicked on, containing the text
    // of the step.
    stepDisplay.setContent(text);
    stepDisplay.open(map, marker);
  });
}
    // Initialize and add the map
    // function initMap() {
    //   const directionsService = new google.maps.DirectionsService();
    //   const directionsRenderer = new google.maps.DirectionsRenderer();
    //
    //   // The location of Davidson
    //   const davidson = { lat: 35.499302, lng: -80.8447 };
    //   // The map, centered at Davidson
    //   const map = new google.maps.Map(document.getElementById("map"), {
    //     zoom: 16,
    //     center: chambers,
    //   });
    // // The marker, positioned at Davidson
    // const marker = new google.maps.Marker({
    //   position: chambers,
    //   map: map,
    // });
    // const marker2 = new google.maps.Marker({
    //   position: commons,
    //   map: map,
    // });
    // const marker3 = new google.maps.Marker({
    //   position: soccer,
    //   map: map,
    // });
</script>
</head>
<body>
<h3>My Google Maps Demo</h3>
<!--The div element for the map -->
<div id="map"></div>
